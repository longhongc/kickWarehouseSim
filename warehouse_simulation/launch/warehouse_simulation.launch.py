import os

from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription
from launch.conditions import IfCondition, UnlessCondition
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.substitutions import Command, LaunchConfiguration, PythonExpression
from launch_ros.actions import Node
from launch_ros.substitutions import FindPackageShare
from ament_index_python import get_package_share_directory
from launch.actions import TimerAction

def generate_launch_description():
  warehouse_simulation_dir = FindPackageShare(package='warehouse_simulation').find('warehouse_simulation')
  # world_file_name = 'warehouse.world'

  # Temporary base warehouse
  # Todo:
  # The gernation of crates should be complete by a warehouse node.
  # And the generation should be generated by loading a config yaml file that contains crates' pose.
  world_file_name = 'warehouse_base_tmp.world'
  world_path = os.path.join(warehouse_simulation_dir, 'worlds', world_file_name)

  robot_model_dir = FindPackageShare(package='robot_model').find('robot_model')
  robot_file_name = 'robot_description_v6/model.sdf'
  robot_file_path = os.path.join(robot_model_dir, 'models', robot_file_name)

  # Launch configuration variables specific to simulation
  headless = LaunchConfiguration('headless')
  use_simulator = LaunchConfiguration('use_simulator')
  world = LaunchConfiguration('world')

  # Declare the launch arguments  
  declare_simulator_gui_cmd = DeclareLaunchArgument(
    name='headless',
    default_value='False',
    description='Whether to execute gzclient')

  declare_use_simulator_cmd = DeclareLaunchArgument(
    name='use_simulator',
    default_value='True',
    description='Whether to start the simulator')

  declare_world_cmd = DeclareLaunchArgument(
    name='world',
    default_value=world_path,
    description='Full path to the world model file to load')

  # Start Gazebo simulation
  start_gazebo_cmd = IncludeLaunchDescription(
    PythonLaunchDescriptionSource(
        os.path.join(warehouse_simulation_dir, 'launch', 'empty_warehouse.launch.py')),
    condition=IfCondition(use_simulator),
    launch_arguments={
        'headless': headless,
        'world': world}.items())

  # Spawn warehouse_bot
  spawn_warehouse_bot = Node(
    package='gazebo_ros', 
    executable='spawn_entity.py',
    arguments=[
        '-file', robot_file_path,
        '-entity', 'warehouse_bot',
        '-x', '-8.5', '-y', '8.5', '-z', '0'])
    
  # Create the launch description and populate
  ld = LaunchDescription()

  ld.add_action(declare_simulator_gui_cmd)
  ld.add_action(declare_use_simulator_cmd)
  ld.add_action(declare_world_cmd)

  # Add any actions
  ld.add_action(start_gazebo_cmd)
  ld.add_action(spawn_warehouse_bot)

  return ld

